startup=1
gpu_passthrough_intel=1
gpu_passthrough_nvidia=0
# Turning off seccomp filtering improves performance at the expense of security
seccomp=0

systemd_nspawn_user_args=--network-macvlan=enp3s0
  --resolv-conf=bind-host
  --system-call-filter='add_key keyctl bpf perf_event_open'
  --capability=all
  --bind=/dev/kmsg
  --bind='/mnt/main/downloads/:/downloads'
  --bind='/mnt/nvme/config/:/config'
  --bind=/dev/ttyUSB0

# Specify command/script to run on the HOST before starting the jail
pre_start_hook=#!/usr/bin/bash
  set -euo pipefail
  echo 'PRE_START_HOOK_EXAMPLE'
  echo 1 > /proc/sys/net/ipv4/ip_forward
  modprobe br_netfilter
  modprobe overlay
  modprobe iptable_nat
  modprobe iptable_filter
  echo 1 > /proc/sys/net/bridge/bridge-nf-call-ip6tables
  echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables
  echo 1 > /proc/sys/vm/overcommit_memory
  echo 1280 > /proc/sys/fs/inotify/max_user_instances
  echo 196608 > /proc/sys/net/netfilter/nf_conntrack_max
  echo 655360 > /proc/sys/fs/inotify/max_user_watches

# Only used while creating the jail
distro=debian
release=bookworm

# Specify command/script to run IN THE JAIL on the first start (once networking is ready in the jail)
# Useful to install packages on top of the base rootfs
initial_setup=#!/usr/bin/bash
  set -euo pipefail
  apt install curl jq git -y

  # Install oh-my-zsh
  apt install zsh -y
  curl -o ~/.zshrc https://raw.githubusercontent.com/javydekoning/homelab/main/dotfiles/.zshrc
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --keep-zshrc --unattended
  chsh root -s /bin/zsh

  # Setup Kubernetes
  curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  curl -sfL https://get.k3s.io | \
  INSTALL_K3S_CHANNEL=latest sh -s - server --cluster-init \
  --disable=servicelb,traefik \
  --kubelet-arg="allowed-unsafe-sysctls=net.ipv4.conf.*"

  # Install Kubecolor
  # URL for the latest release page of kubecolor
  LATEST_RELEASE_URL="https://github.com/kubecolor/kubecolor/releases/latest"

  # Use curl to get the URL of the latest release quietly
  REDIRECT_URL=$(curl -sL -o /dev/null -w %{url_effective} $LATEST_RELEASE_URL)

  # Extract the tag (release version) from the URL
  TAG=$(basename $REDIRECT_URL)

  # Strip the leading 'v' from the tag
  TAG=${TAG#v}

  # Construct the download URL for the amd64 release

  DOWNLOAD_URL="https://github.com/kubecolor/kubecolor/releases/download/v${TAG}/kubecolor_${TAG}_linux_amd64.tar.gz"
  echo "Downloading from: ${DOWNLOAD_URL}"
  # Download the release tarball quietly
  curl -sL -o kubecolor_${TAG}_Linux_x86_64.tar.gz $DOWNLOAD_URL

  # Verify the download
  if [[ $? -eq 0 ]]; then
      echo "Download completed successfully."
  else
      echo "Download failed."
      exit 1
  fi

  # Extract the tarball quietly
  tar -xzf kubecolor_${TAG}_Linux_x86_64.tar.gz -C .

  # Verify extraction
  if [[ $? -eq 0 ]]; then
      echo "Extraction completed successfully."
  else
      echo "Extraction failed."
      exit 1
  fi

  echo "kubecolor downloaded and extracted successfully."

  cp kubecolor /usr/bin/kubecolor

  # Bootstrap Argo CD
  git clone https://github.com/javydekoning/homelab.git ~/homelab
  cd ~/homelab/k8s/cluster-critical/argo-cd
  kubectl create ns argocd
  helm dependency build
  helm template argo-cd . --values ./values.yaml -n argocd | kubectl apply -n argocd -f -

  # Launch cluster critical resources
  printf "%s" "Enter ACCESS_KEY: "
  read ACCESS_KEY

  printf "%s" "Enter SECRET_KEY: "
  read SECRET_KEY

  kubectl create ns external-secrets
  kubectl create secret generic awssm-secret -n external-secrets \
    --from-literal=access-key=$ACCESS_KEY --from-literal=secret-access-key=$SECRET_KEY
  kubectl apply -f ~/homelab/k8s/argo-application-sets/cluster-critical-application-set.yaml
  kubectl apply -f ~/homelab/k8s/argo-application-sets/cluster-critical-config-application-set.yaml

  # Enable HW Acceleration
  apt-get -y install {va-driver-all,ocl-icd-libopencl1,intel-opencl-icd,vainfo,intel-gpu-tools}

  # Run Ansible customization
  # apt install cron golang pip python3-venv ansible -y
  # cd ~/homelab/
  # python3 -m venv .
  # source ./bin/activate
  # pip install kubernetes
  # pip install github3.py
  # ansible-playbook main.yml

# Usually no need to change systemd_run_default_args
systemd_run_default_args=--collect
  --property=Delegate=yes
  --property=RestartForceExitStatus=133
  --property=SuccessExitStatus=133
  --property=TasksMax=infinity
  --property=Type=notify
  --setenv=SYSTEMD_NSPAWN_LOCK=0
  --property=KillMode=mixed

# Usually no need to change systemd_nspawn_default_args
systemd_nspawn_default_args=--bind-ro=/sys/module
  --boot
  --inaccessible=/sys/module/apparmor
  --quiet
  --keep-unit
