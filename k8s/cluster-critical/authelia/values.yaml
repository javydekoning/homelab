# Source: https://raw.githubusercontent.com/authelia/chartrepo/master/charts/authelia/values.yaml
authelia:
  image:
    registry: ghcr.io
    repository: authelia/authelia
    tag: ""
    pullPolicy: IfNotPresent
    pullSecrets: []

  domain: k8s.javydekoning.com

  ingress:
    enabled: true
    className: nginx
    ## Example: To get Authelia to listen on https://auth.example.com specify 'auth' for ingress.subdomain,
    subdomain: auth

    tls:
      enabled: true
      secret: javydekoning-com-tls

  ##
  ## Authelia Config Map Generator
  ##
  configMap:
    # Enable the configMap source for the Authelia config.
    # If this is false you need to provide a volumeMount via PV/PVC or other means that mounts to /config.
    enabled: true

    annotations: {}
    # annotations:
    #   myAnnotation: myValue

    labels: {}
    # labels:
    #   myLabel: myValue

    key: configuration.yaml

    existingConfigMap: ""

    ##
    ## Server Configuration
    ##
    server:
      ##
      ## Port sets the configured port for the daemon, service, and the probes.
      ## Default is 9091 and should not need to be changed.
      ##
      port: 9091

      ## Set the single level path Authelia listens on.
      ## Must be alphanumeric chars and should not contain any slashes.
      path: ""

      ## Set the path on disk to Authelia assets.
      ## Useful to allow overriding of specific static assets.
      # asset_path: /config/assets/
      asset_path: ""

      ## Customize Authelia headers.
      headers:
        ## Read the Authelia docs before setting this advanced option.
        ## https://www.authelia.com/configuration/miscellaneous/server/#csp_template.
        csp_template: ""

      ## Server Buffers configuration.
      buffers:
        ## Read buffer.
        read: 4096

        ## Write buffer.
        write: 4096

      ## Server Timeouts configuration.
      timeouts:
        ## Read timeout.
        read: 6s

        ## Write timeout.
        write: 6s

        ## Idle timeout.
        idle: 30s

    log:
      ## Level of verbosity for logs: info, debug, trace.
      level: info

      ## Format the logs are written as: json, text.
      format: text

      ## TODO: Statefulness check should check if this is set, and the configMap should enable it.
      ## File path where the logs will be written. If not set logs are written to stdout.
      # file_path: /config/authelia.log
      file_path: ""

    ##
    ## Telemetry Configuration
    ##
    telemetry:
      ##
      ## Metrics Configuration
      ##
      metrics:
        ## Enable Metrics.
        enabled: false

        ## The port to listen on for metrics. This should be on a different port to the main server.port value.
        port: 9959

        ## Metrics Server Buffers configuration.
        buffers:
          ## Read buffer.
          read: 4096

          ## Write buffer.
          write: 4096

        ## Metrics Server Timeouts configuration.
        timeouts:
          ## Read timeout.
          read: 6s

          ## Write timeout.
          write: 6s

          ## Idle timeout.
          idle: 30s

        serviceMonitor:
          enabled: false
          annotations: {}
          labels: {}

    ## Default redirection URL
    ##
    ## If user tries to authenticate without any referer, Authelia does not know where to redirect the user to at the end
    ## of the authentication process. This parameter allows you to specify the default redirection URL Authelia will use
    ## in such a case.
    ##
    ## Note: this parameter is optional. If not provided, user won't be redirected upon successful authentication.
    ## Default is https://www.<domain> (value at the top of the values.yaml).
    default_redirection_url: "https://homer.k8s.javydekoning.com"
    # default_redirection_url: https://example.com

    ## Set the default 2FA method for new users and for when a user has a preferred method configured that has been
    ## disabled. This setting must be a method that is enabled.
    ## Options are totp, webauthn, mobile_push.
    default_2fa_method: ""

    theme: dark

    ##
    ## TOTP Configuration
    ##
    ## Parameters used for TOTP generation.
    totp:
      ## Disable TOTP.
      disable: false

      ## The issuer name displayed in the Authenticator application of your choice.
      ## Defaults to <domain>.
      issuer: ""

      ## The TOTP algorithm to use.
      ## It is CRITICAL you read the documentation before changing this option:
      ## https://www.authelia.com/configuration/second-factor/time-based-one-time-password/#algorithm
      algorithm: sha1

      ## The number of digits a user has to input. Must either be 6 or 8.
      ## Changing this option only affects newly generated TOTP configurations.
      ## It is CRITICAL you read the documentation before changing this option:
      ## https://www.authelia.com/configuration/second-factor/time-based-one-time-password/#digits
      digits: 6

      ## The period in seconds a one-time password is valid for.
      ## Changing this option only affects newly generated TOTP configurations.
      period: 30

      ## The skew controls number of one-time passwords either side of the current one that are valid.
      ## Warning: before changing skew read the docs link below.
      ## See: https://www.authelia.com/configuration/second-factor/time-based-one-time-password/#input-validation to read the documentation.
      skew: 1

      ## The size of the generated shared secrets. Default is 32 and is sufficient in most use cases, minimum is 20.
      secret_size: 32

    ##
    ## WebAuthn Configuration
    ##
    ## Parameters used for WebAuthn.
    webauthn:
      ## Disable Webauthn.
      disable: false

      ## Adjust the interaction timeout for Webauthn dialogues.
      timeout: 60s

      ## The display name the browser should show the user for when using Webauthn to login/register.
      display_name: Authelia

      ## Conveyance preference controls if we collect the attestation statement including the AAGUID from the device.
      ## Options are none, indirect, direct.
      attestation_conveyance_preference: indirect

      ## User verification controls if the user must make a gesture or action to confirm they are present.
      ## Options are required, preferred, discouraged.
      user_verification: preferred

    duo_api:
      enabled: false

    ##
    ## Authentication Backend Provider Configuration
    ##
    ## Used for verifying user passwords and retrieve information such as email address and groups users belong to.
    ##
    ## The available providers are: `file`, `ldap`. You must use one and only one of these providers.
    authentication_backend:
      ## Password Reset Options.
      password_reset:
        ## Disable both the HTML element and the API for reset password functionality
        disable: true

        ## External reset password url that redirects the user to an external reset portal. This disables the internal reset
        ## functionality.
        custom_url: ""

      ## The amount of time to wait before we refresh data from the authentication backend. Uses duration notation.
      ## To disable this feature set it to 'disable', this will slightly reduce security because for Authelia, users will
      ## always belong to groups they belonged to at the time of login even if they have been removed from them in LDAP.
      ## To force update on every request you can set this to '0' or 'always', this will increase processor demand.
      ## See the below documentation for more information.
      ## Duration Notation docs:  https://www.authelia.com/configuration/prologue/common/#duration-notation-format
      ## Refresh Interval docs: https://www.authelia.com/configuration/first-factor/ldap/#refresh-interval
      refresh_interval: 5m

      ## LDAP backend configuration.
      ##
      ## This backend allows Authelia to be scaled to more
      ## than one instance and therefore is recommended for
      ## production.
      ldap:
        ## Enable LDAP Backend.
        enabled: false

      ##
      ## File (Authentication Provider)
      ##
      ## With this backend, the users database is stored in a file which is updated when users reset their passwords.
      ## Therefore, this backend is meant to be used in a dev environment and not in production since it prevents Authelia
      ## to be scaled to more than one instance. The options under 'password' have sane defaults, and as it has security
      ## implications it is highly recommended you leave the default values. Before considering changing these settings
      ## please read the docs page: https://www.authelia.com/reference/guides/passwords/#tuning
      ##
      ## Important: Kubernetes (or HA) users must read https://www.authelia.com/overview/authorization/statelessness/
      ##
      file:
        enabled: true
        path: /config/users_database.yml
        watch: true
        search:
          email: false
          case_insensitive: false
        password:
          algorithm: argon2
          argon2:
            variant: argon2id
            iterations: 3
            memory: 65536
            parallelism: 4
            key_length: 32
            salt_length: 16
          scrypt:
            iterations: 16
            block_size: 8
            parallelism: 1
            key_length: 32
            salt_length: 16
          pbkdf2:
            variant: sha512
            iterations: 310000
            salt_length: 16
          sha2crypt:
            variant: sha512
            iterations: 50000
            salt_length: 16
          bcrypt:
            variant: standard
            cost: 12

    ##
    ## Password Policy Configuration.
    ##
    password_policy:
      ## The standard policy allows you to tune individual settings manually.
      standard:
        enabled: false

        ## Require a minimum length for passwords.
        min_length: 8

        ## Require a maximum length for passwords.
        max_length: 0

        ## Require uppercase characters.
        require_uppercase: true

        ## Require lowercase characters.
        require_lowercase: true

        ## Require numeric characters.
        require_number: true

        ## Require special characters.
        require_special: true

      ## zxcvbn is a well known and used password strength algorithm. It does not have tunable settings.
      zxcvbn:
        enabled: false

        ## Configures the minimum score allowed.
        min_score: 0

    ##
    ## Access Control Configuration
    ##
    ## Access control is a list of rules defining the authorizations applied for one resource to users or group of users.
    ##
    ## If 'access_control' is not defined, ACL rules are disabled and the 'bypass' rule is applied, i.e., access is allowed
    ## to anyone. Otherwise restrictions follow the rules defined.
    ##
    ## Note: One can use the wildcard * to match any subdomain.
    ## It must stand at the beginning of the pattern. (example: *.mydomain.com)
    ##
    ## Note: You must put patterns containing wildcards between simple quotes for the YAML to be syntactically correct.
    ##
    ## Definition: A 'rule' is an object with the following keys: 'domain', 'subject', 'policy' and 'resources'.
    ##
    ## - 'domain' defines which domain or set of domains the rule applies to.
    ##
    ## - 'subject' defines the subject to apply authorizations to. This parameter is optional and matching any user if not
    ##    provided. If provided, the parameter represents either a user or a group. It should be of the form
    ##    'user:<username>' or 'group:<groupname>'.
    ##
    ## - 'policy' is the policy to apply to resources. It must be either 'bypass', 'one_factor', 'two_factor' or 'deny'.
    ##
    ## - 'resources' is a list of regular expressions that matches a set of resources to apply the policy to. This parameter
    ##   is optional and matches any resource if not provided.
    ##
    ## Note: the order of the rules is important. The first policy matching (domain, resource, subject) applies.
    access_control:
      ## Configure the ACL as a Secret instead of part of the ConfigMap.
      secret:
        ## Enables the ACL section being generated as a secret.
        enabled: false

        ## The key in the secret which contains the file to mount.
        key: configuration.acl.yaml

        ## An existingSecret name, if configured this will force the secret to be mounted using the key above.
        existingSecret: ""

      ## Default policy can either be 'bypass', 'one_factor', 'two_factor' or 'deny'. It is the policy applied to any
      ## resource if there is no policy to be applied to the user.
      default_policy: deny

      #networks: []
      networks:
        - name: private
          networks:
            - 10.0.0.0/8
            - 172.16.0.0/12
            - 192.168.0.0/16
      # - name: vpn
      #   networks:
      #   - 10.9.0.0/16

      rules: []
      # rules:
      # - domain_regex: '^.*\.example.com$'
      #   policy: bypass
      # - domain: public.example.com
      #   policy: bypass
      # - domain: "*.example.com"
      #   policy: bypass
      #   methods:
      #   - OPTIONS
      # - domain: secure.example.com
      #   policy: one_factor
      #   networks:
      #   - private
      #   - vpn
      #   - 192.168.1.0/24
      #   - 10.0.0.1
      # - domain:
      #   - secure.example.com
      #   - private.example.com
      #   policy: two_factor
      # - domain: singlefactor.example.com
      #   policy: one_factor
      # - domain: "mx2.mail.example.com"
      #   subject: "group:admins"
      #   policy: deny
      # - domain: "*.example.com"
      #   subject:
      #   - "group:admins"
      #   - "group:moderators"
      #   policy: two_factor
      # - domain: dev.example.com
      #   resources:
      #   - "^/groups/dev/.*$"
      #   subject: "group:dev"
      #   policy: two_factor
      # - domain: dev.example.com
      #   resources:
      #   - "^/users/john/.*$"
      #   subject:
      #   - ["group:dev", "user:john"]
      #   - "group:admins"
      #   policy: two_factor
      # - domain: "{user}.example.com"
      #   policy: bypass

    ##
    ## Session Provider Configuration
    ##
    ## The session cookies identify the user once logged in.
    ## The available providers are: `memory`, `redis`. Memory is the provider unless redis is defined.
    session:
      ## The name of the session cookie. (default: authelia_session).
      name: authelia_session

      ## Sets the Cookie SameSite value. Possible options are none, lax, or strict.
      ## Please read https://www.authelia.com/configuration/session/introduction/#same_site
      same_site: lax

      ## The time in seconds before the cookie expires and session is reset.
      expiration: 1h

      ## The inactivity time in seconds before the session is reset.
      inactivity: 5m

      ## The remember me duration.
      ## Value is in seconds, or duration notation. Value of 0 disables remember me.
      ## See: https://www.authelia.com/configuration/prologue/common/#duration-notation-format
      ## Longer periods are considered less secure because a stolen cookie will last longer giving attackers more time to
      ## spy or attack. Currently the default is 1M or 1 month.
      remember_me_duration: 1M

      ##
      ## Redis Provider
      ##
      ## Important: Kubernetes (or HA) users must read https://www.authelia.com/overview/authorization/statelessness/
      ##
      ## The redis connection details
      redis:
        enabled: false

    ##
    ## Regulation Configuration
    ##
    ## This mechanism prevents attackers from brute forcing the first factor. It bans the user if too many attempts are done
    ## in a short period of time.
    regulation:
      ## The number of failed login attempts before user is banned. Set it to 0 to disable regulation.
      max_retries: 3

      ## The time range during which the user can attempt login before being banned. The user is banned if the
      ## authentication failed 'max_retries' times in a 'find_time' seconds window. Find Time accepts duration notation.
      ## See: https://www.authelia.com/configuration/prologue/common/#duration-notation-format
      find_time: 2m

      ## The length of time before a banned user can login again. Ban Time accepts duration notation.
      ## See: https://www.authelia.com/configuration/prologue/common/#duration-notation-format
      ban_time: 5m

    ##
    ## Storage Provider Configuration
    ##
    ## The available providers are: `local`, `mysql`, `postgres`. You must use one and only one of these providers.
    storage:
      ##
      ## Local (Storage Provider)
      ##
      ## This stores the data in a SQLite3 Database.
      ## This is only recommended for lightweight non-stateful installations.
      ##
      ## Important: Kubernetes (or HA) users must read https://www.authelia.com/overview/authorization/statelessness/
      ##
      local:
        enabled: true
        path: /config/db.sqlite3

      mysql:
        enabled: false

      postgres:
        enabled: false

    ##
    ## Notification Provider
    ##
    ##
    ## Notifications are sent to users when they require a password reset, a u2f registration or a TOTP registration.
    ## The available providers are: filesystem, smtp. You must use one and only one of these providers.
    notifier:
      smtp:
        enabled: false

    identity_providers:
      oidc:
        ## Enables this in the config map. Currently in beta stage.
        ## See https://www.authelia.com/r/openid-connect/
        enabled: false

  secret:
    existingSecret: ""
    # existingSecret: authelia

    annotations: {}
    # annotations:
    #   myAnnotation: myValue

    labels: {}
    # labels:
    #   myLabel: myValue

    mountPath: /secrets

    excludeVolumeAndMounts: false

    ## Secrets.
    jwt:
      key: JWT_TOKEN
      value: ""
      filename: JWT_TOKEN
    ldap:
      key: LDAP_PASSWORD
      value: ""
      filename: LDAP_PASSWORD
    storage:
      key: STORAGE_PASSWORD
      value: ""
      filename: STORAGE_PASSWORD
    storageEncryptionKey:
      key: STORAGE_ENCRYPTION_KEY
      value: ""
      filename: STORAGE_ENCRYPTION_KEY
    session:
      key: SESSION_ENCRYPTION_KEY
      value: ""
      filename: SESSION_ENCRYPTION_KEY
    duo:
      key: DUO_API_KEY
      value: ""
      filename: DUO_API_KEY
    redis:
      key: REDIS_PASSWORD
      value: ""
      filename: REDIS_PASSWORD
    redisSentinel:
      key: REDIS_SENTINEL_PASSWORD
      value: ""
      filename: REDIS_SENTINEL_PASSWORD
    smtp:
      key: SMTP_PASSWORD
      value: ""
      filename: SMTP_PASSWORD
    oidcPrivateKey:
      key: OIDC_PRIVATE_KEY
      value: ""
      filename: OIDC_PRIVATE_KEY
    oidcHMACSecret:
      key: OIDC_HMAC_SECRET
      value: ""
      filename: OIDC_HMAC_SECRET

    ## HashiCorp Vault Injector configuration.
    vaultInjector:
      ## Enable the vault injector annotations. This will disable secret injection via other means.
      ## To see the annotations and what they do see: https://www.vaultproject.io/docs/platform/k8s/injector/annotations
      ## Annotations with a blank string do not get configured at all.
      ## Additional annotations can be configured via the secret.annotations: {} above.
      ## Secrets are by default rendered in the /secrets directory. Changing this can be done via editing the
      ## secret.mountPath value. You can alter the filenames with the secret.<secretName>.filename values.
      ## Secrets are loaded from vault path specified below with secrets.<secretName>.path values. Its format should be
      ## <SECRET_PATH>:<KEY_NAME>.
      ## Secrets are by default rendered by template suitable for vault KV v1 or database secrets engines. If other used,
      ## it can be overridden per each secret by specifying secrets.<secretName>.templateValue. For example for KV v2
      ## secrets engine would be '{{ with secret "<SECRET_PATH>" }}{{ .Data.data.<KEY_NAME> }}{{ end }}'.
      enabled: false

      ## The vault role to assign via annotations.
      ## Annotation: vault.hashicorp.com/role
      role: authelia

      agent:
        ## Annotation: vault.hashicorp.com/agent-inject-status
        status: update

        ## Annotation: vault.hashicorp.com/agent-configmap
        configMap: ""

        ## Annotation: vault.hashicorp.com/agent-image
        image: ""

        ## Annotation: vault.hashicorp.com/agent-init-first
        initFirst: "false"

        ## Annotation: vault.hashicorp.com/agent-inject-command
        command: "sh -c 'kill HUP $(pidof authelia)'"

        ## Annotation: vault.hashicorp.com/agent-run-as-same-user
        runAsSameUser: "true"

      secrets:
        jwt:
          ## Vault Path to the Authelia JWT secret.
          ## Annotation: vault.hashicorp.com/agent-inject-secret-jwt
          path: secrets/authelia/jwt:token

          ## Vault template specific to JWT.
          ## Annotation: vault.hashicorp.com/agent-inject-template-jwt
          templateValue: ""

          ## Vault after render command specific to JWT.
          ## Annotation: vault.hashicorp.com/agent-inject-command-jwt
          command: ""
        ldap:
          ## Vault Path to the Authelia LDAP secret.
          ## Annotation: vault.hashicorp.com/agent-inject-secret-ldap
          path: secrets/authelia/ldap:password

          ## Vault template specific to LDAP.
          ## Annotation: vault.hashicorp.com/agent-inject-template-ldap
          templateValue: ""

          ## Vault after render command specific to LDAP.
          ## Annotation: vault.hashicorp.com/agent-inject-command-ldap
          command: ""
        storage:
          ## Vault Path to the Authelia storage password secret.
          ## Annotation: vault.hashicorp.com/agent-inject-secret-storage
          path: secrets/authelia/storage:password

          ## Vault template specific to the storage password.
          ## Annotation: vault.hashicorp.com/agent-inject-template-storage
          templateValue: ""

          ## Vault after render command specific to the storage password.
          ## Annotation: vault.hashicorp.com/agent-inject-command-storage
          command: ""
        storageEncryptionKey:
          ## Vault Path to the Authelia storage encryption key secret.
          ## Annotation: vault.hashicorp.com/agent-inject-secret-storage-encryption-key
          path: secrets/authelia/storage:encryption_key

          ## Vault template specific to the storage encryption key.
          ## Annotation: vault.hashicorp.com/agent-inject-template-storage-encryption-key
          templateValue: ""

          ## Vault after render command specific to the storage encryption key.
          ## Annotation: vault.hashicorp.com/agent-inject-command-storage-encryption-key
          command: ""
        session:
          ## Vault Path to the Authelia session secret.
          ## Annotation: vault.hashicorp.com/agent-inject-secret-session
          path: secrets/authelia/session:encryption_key

          ## Vault template specific to session.
          ## Annotation: vault.hashicorp.com/agent-inject-template-session
          templateValue: ""

          ## Vault after render command specific to session.
          ## Annotation: vault.hashicorp.com/agent-inject-command-session
          command: ""
        duo:
          ## Vault Path to the Authelia duo secret.
          ## Annotation: vault.hashicorp.com/agent-inject-secret-duo
          path: secrets/authelia/duo:api_key

          ## Vault template specific to duo.
          ## Annotation: vault.hashicorp.com/agent-inject-template-duo
          templateValue: ""

          ## Vault after render command specific to duo.
          ## Annotation: vault.hashicorp.com/agent-inject-command-duo
          command: ""
        redis:
          ## Vault Path to the Authelia redis secret.
          ## Annotation: vault.hashicorp.com/agent-inject-secret-redis
          path: secrets/authelia/redis:password

          ## Vault template specific to redis.
          ## Annotation: vault.hashicorp.com/agent-inject-template-redis
          templateValue: ""

          ## Vault after render command specific to redis.
          ## Annotation: vault.hashicorp.com/agent-inject-command-redis
          command: ""
        redisSentinel:
          ## Vault Path to the Authelia redis sentinel secret.
          ## Annotation: vault.hashicorp.com/agent-inject-secret-redis-sentinel
          path: secrets/authelia/redis_sentinel:password

          ## Vault template specific to redis sentinel.
          ## Annotation: vault.hashicorp.com/agent-inject-template-redis-sentinel
          templateValue: ""

          ## Vault after render command specific to redis sentinel.
          ## Annotation: vault.hashicorp.com/agent-inject-command-redis-sentinel
          command: ""
        smtp:
          ## Vault Path to the Authelia SMTP secret.
          ## Annotation: vault.hashicorp.com/agent-inject-secret-smtp
          path: secrets/authelia/smtp:password

          ## Vault template specific to SMTP.
          ## Annotation: vault.hashicorp.com/agent-inject-template-smtp
          templateValue: ""

          ## Vault after render command specific to SMTP.
          ## Annotation: vault.hashicorp.com/agent-inject-command-smtp
          command: ""
        oidcPrivateKey:
          ## Vault Path to the Authelia OIDC private key secret.
          ## Annotation: vault.hashicorp.com/agent-inject-secret-oidc-private-key
          path: secrets/authelia/oidc:private_key

          ## Vault template specific to OIDC private key.
          ## Annotation: vault.hashicorp.com/agent-inject-template-oidc-private-key
          templateValue: ""

          ## Vault after render command specific to OIDC private key.
          ## Annotation: vault.hashicorp.com/agent-inject-command-oidc-private-key
          command: ""
        oidcHMACSecret:
          ## Vault Path to the Authelia OIDC HMAC secret.
          ## Annotation: vault.hashicorp.com/agent-inject-secret-oidc-hmac-secret
          path: secrets/authelia/oidc:hmac_secret

          ## Vault template specific to OIDC HMAC secret.
          ## Annotation: vault.hashicorp.com/agent-inject-template-oidc-hmac-secret
          templateValue: ""

          ## Vault after render command specific to OIDC HMAC secret.
          ## Annotation: vault.hashicorp.com/agent-inject-command-oidc-hmac-secret
          command: ""

  certificates:
    existingSecret: ""
    # existingSecret: authelia

    annotations: {}
    # annotations:
    #   myAnnotation: myValue

    labels: {}
    # labels:
    #   myLabel: myValue

    values: []
    # values:
    # - name: Example_Com_Root_Certificate_Authority_B64.pem
    #   secretValue: ==
    # - name: Example_Com_Root_Certificate_Authority.pem
    #   value: |
    #     -----BEGIN CERTIFICATE-----
    #     MIIDXzCCAkegAwIBAgILBAAAAAABIVhTCKIwDQYJKoZIhvcNAQELBQAwTDEgMB4G
    #     A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjMxEzARBgNVBAoTCkdsb2JhbFNp
    #     Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDkwMzE4MTAwMDAwWhcNMjkwMzE4
    #     MTAwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMzETMBEG
    #     A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI
    #     hvcNAQEBBQADggEPADCCAQoCggEBAMwldpB5BngiFvXAg7aEyiie/QV2EcWtiHL8
    #     RgJDx7KKnQRfJMsuS+FggkbhUqsMgUdwbN1k0ev1LKMPgj0MK66X17YUhhB5uzsT
    #     gHeMCOFJ0mpiLx9e+pZo34knlTifBtc+ycsmWQ1z3rDI6SYOgxXG71uL0gRgykmm
    #     KPZpO/bLyCiR5Z2KYVc3rHQU3HTgOu5yLy6c+9C7v/U9AOEGM+iCK65TpjoWc4zd
    #     QQ4gOsC0p6Hpsk+QLjJg6VfLuQSSaGjlOCZgdbKfd/+RFO+uIEn8rUAVSNECMWEZ
    #     XriX7613t2Saer9fwRPvm2L7DWzgVGkWqQPabumDk3F2xmmFghcCAwEAAaNCMEAw
    #     DgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFI/wS3+o
    #     LkUkrk1Q+mOai97i3Ru8MA0GCSqGSIb3DQEBCwUAA4IBAQBLQNvAUKr+yAzv95ZU
    #     RUm7lgAJQayzE4aGKAczymvmdLm6AC2upArT9fHxD4q/c2dKg8dEe3jgr25sbwMp
    #     jjM5RcOO5LlXbKr8EpbsU8Yt5CRsuZRj+9xTaGdWPoO4zzUhw8lo/s7awlOqzJCK
    #     6fBdRoyV3XpYKBovHd7NADdBj+1EbddTKJd+82cEHhXXipa0095MJ6RMG3NzdvQX
    #     mcIfeg7jLQitChws/zyrVQ4PkX4268NXSb7hLi18YIvDQVETI53O9zJrlAGomecs
    #     Mx86OyXShkDOOyyGeMlhLxS67ttVb9+E7gUJTb0o2HLO02JQZR7rkpeDMdmztcpH
    #     WD9f
    #     -----END CERTIFICATE-----

  ##
  ## Authelia Persistence Configuration.
  ##
  ## Useful in scenarios where you need persistent storage.
  ## Auth Provider Use Case: file; we recommend you use the ldap provider instead.
  ## Storage Provider Use Case: local; we recommend you use the mysql/mariadb or postgres provider instead.
  ## Configuration Use Case: when you want to manually configure the configuration entirely (set configMap.enabled = false).
  ##
  persistence:
    enabled: false

    annotations: {}
    # annotations:
    #   myAnnotation: myValue

    labels: {}
    # labels:
    #   myLabel: myValue

    readOnly: false
    subPath: ""

    existingClaim: ""
    # existingClaim: my-claim-name

    storageClass: ""
    # storageClass: "my-storage-class"

    accessModes:
      - ReadWriteOnce

    size: 100Mi

    selector: {}
